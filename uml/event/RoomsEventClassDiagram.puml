@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

ControllerHomeActivity *-down-> BannerController
ControllerHomeActivity *-left-> ControllerBannerFragment

ControllerBannerFragment ..|> IBannerView
HostBannerFragment .up.|> IBannerView

BannerController .down.|> RoomsEventListener
BannerController .down.> RoomsEventManager
BannerController .down.> BannerItems
BannerController -left-> IBannerView

RoomsEventManager *-down-> rcf.EventController
RoomsEventManager -right-> RoomsEventListener: callback


rcf.EventController -right-> rcf.EventCallback: callback
rcf.EventService -up-> rcf.EventController: callback
rcf.EventService *-down-> rcv.IRoomsRcvEventUiController

class ControllerHomeActivity {
    # setBannerController(controller: BannerController,bannerView: IBannerView, attachedId: Int)
}

class HostBannerFragment
class ControllerBannerFragment

note top of BannerItems
    if you are in the HostMeeting screen,
    use FLAG_HOST_BANNER_IN_MEETING to generate a BannerItem map
    which are supported to display in the HostMeeting screen
end note
class BannerItems<< (S, #FF7700) >> {
    + FLAG_HOST_BANNER: Int
    + FLAG_HOST_AUTO_FRAMING_BANNER: Int
    + FLAG_HOST_BANNER_IN_MEETING: Int
    + FLAG_HOST_BANNER_IN_PHONE: Int
    + FLAG_CONTROLLER_BANNER: Int
    + FLAG_CONTROLLER_PARTICIPANTS_BANNER: Int
    + FLAG_CONTROLLER_SHARING_BANNER: Int
    + generateBannerItems(flags: Int): MutableMap<RcvEventName, AbstractBannerItem>
}

note right of BannerController
    filter out the supported banner items,
    and then pass to IBannerView to show them
end note
class BannerController {
    - flags: Int
    - bannerItems: Map<RcvEventName, AbstractBannerItem>
    - bannerView: IBannerView
    + init(context: Context, bannerView: IBannerView)
    + filterBanners(events: List<RcvEvent>): Boolean
    + hideAllBanners()
}

interface IBannerView {
    + showBanners(bannerMaps: LinkedHashMap<RcvEvent, AbstractBannerItem>): Boolean
}

class RoomsEventManager<< (S, #FF7700) Singleton>> {
    - eventController: EventController
    + registerRoomsEventListener(listener: RoomsEventListener)
    + unregisterRoomsEventListener(listener: RoomsEventListener)
}

note right of RoomsEventListener
    showBannerList return whether handled or not
end note
interface RoomsEventListener {
    + showBannerList(event:RoomsEvent): Boolean
    + showToast(event:RoomsEvent): Boolean
    + showAlert(event:RoomsEvent): Boolean
}

namespace rcf {
    class EventController {
        + addCallback(callback: EventCallback)
        + getCurrentEvents(): List<RoomsEvent>
        + postCustomEvents(event: RoomsEvent, priority: Int)
        + hideCustomEvents(eventName: String)
    }

    class EventCallback {
        + showBannerList(event:RoomsEvent)
        + showToast(event:RoomsEvent)
        + showAlert(event:RoomsEvent)
    }

    class EventService
}

namespace rcv {
    class IRoomsRcvEventUiController
}
@enduml