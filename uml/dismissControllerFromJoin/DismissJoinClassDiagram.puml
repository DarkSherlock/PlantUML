@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

RCV.ClientPdUiController .down.> RCV.IControllerService
RCF.RoomMeetingConnector .down.> RCV.IControllerService

MeetingActionHandler o-- IHostPdUiController
MeetingActionHandler ..> HostCommunicationService :notifyActions

RcvMeetingActionHandler --|> MeetingActionHandler
WebinarPanelistMeetingActionHandler --|> MeetingActionHandler

HostMeetingService o-- RcvMeetingActionHandler
HostMeetingService o-- HostRcvInMeetingController
HostMeetingService o-- HostRcvJoinMeetingController

HostRcvJoinMeetingController ..|> IRcvJoinMeetingController
HostRcvInMeetingController ..|> IRcvInMeetingController

ControllerMeetingService o-- RcvClientInMeetingController
ControllerMeetingService o-- RcvClientJoinMeetingController

RcvClientJoinMeetingController ..|> IRcvJoinMeetingController
RcvClientInMeetingController ..|> IRcvInMeetingController

RcvClientJoinMeetingController --|> BaseClientJoinMeetingController
WebinarPanelistClientJoinMeetingController --|> BaseClientJoinMeetingController

RcvClientInMeetingController --|> BaseClientInMeetingController
WebinarPanelistClientInMeetingController --|> BaseClientInMeetingController

BaseClientJoinMeetingController o-- RCF.RoomMeetingConnector
BaseClientInMeetingController o-- RCF.RoomMeetingConnector

class HostMeetingService {
    - meetingActionHandler: RcvMeetingActionHandler
    + inMeetingController: HostRcvInMeetingController
    + joinMeetingController: HostRcvJoinMeetingController
}

class ControllerMeetingService {
    + inMeetingController: RcvClientInMeetingController
    + joinMeetingController: RcvClientJoinMeetingController
}

class MeetingActionHandler {
    - hostPdUiController: IHostPdUiController
    # notifyJoin(meetingId: String?, password: String?, joinUrl: String?, email: String?)
}

class RcvMeetingActionHandler {
    + onContinueJoinMeetingWithPwd(password: String?)
}

class WebinarPanelistMeetingActionHandler {
}

class HostRcvInMeetingController {
    - activeMeetingUiController: IActiveMeetingUiController? = null
}

class HostRcvJoinMeetingController {
    - activeMeetingUiController: IActiveMeetingUiController? = null
}

class BaseClientJoinMeetingController {
    # roomsMeetingConnector: IRoomsMeetingConnector?
}

class RcvClientJoinMeetingController {

}

class WebinarPanelistClientJoinMeetingController {

}

class BaseClientInMeetingController {
    # roomsMeetingConnector: IRoomsMeetingConnector?
    + sharingController: SharingController
}

class RcvClientInMeetingController {
    + breakoutRoomController: ControllerBreakoutRoomController
    + recordingController: ControllerRecordingController
    + chatController: ControllerChatController
    + e2eeMeetingController: ControllerE2eeMeetingController
}

class WebinarPanelistClientInMeetingController {

}

interface IRcvInMeetingController {
    + breakoutRoomController: IBreakoutRoomController?
    + e2eeMeetingController: IE2eeMeetingController?
    + getMeetingId(): String?
    + getMeetingPwd(): String?
    + getMeetingTitle(): String?
    + getMeetingHost(): String?
    + getMeetingPersonalName(): String?
    + getLinkToJoin(): String?
    + isMeetingAllowJoin(): Boolean
}

interface IRcvJoinMeetingController {
    fun startMeeting()
    fun rejoinMeeting(reason: ERejoinReason)
    fun continueWithPassword(password: String?)
    fun resumeMeeting(meetingId: String, password: String? = null)
    fun endMeeting()
}

namespace RCF {
    class RoomMeetingConnector {
    }
}

namespace RCV {
    class ClientPdUiController {
    }

    class IControllerService<< (S, #FF7700) >> {
    }
}

@enduml